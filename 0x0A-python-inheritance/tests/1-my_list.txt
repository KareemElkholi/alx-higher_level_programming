Import:
	>>> MyList = __import__("1-my_list").MyList

Check instance:
	>>> l = MyList()
        >>> isinstance(l, list)
        True

Check type:
        >>> type(l) == MyList
        True

print_sorted method is an instance method:
	>>> type(MyList.__dict__['print_sorted'])
	<class 'function'>

Print Empty list:
	>>> print(l)
	[]

Print unsorted list:
	>>> l.append(3)
        >>> l.append(9)
        >>> l.append(8)
        >>> l.append(4)
        >>> print(l)
	[3, 9, 8, 4]

print_sorted method called via class with no args:
	>>> l.__class__.print_sorted()
	Traceback (most recent call last):
	TypeError: print_sorted() missing 1 required positional argument: 'self'

print_sorted called with 2 arg:
        >>> l.print_sorted(0)
        Traceback (most recent call last):
        TypeError: print_sorted() takes 1 positional argument but 2 were given

print_sorted called with 3 args:
	>>> l.print_sorted(0, 1)
	Traceback (most recent call last):
	TypeError: print_sorted() takes 1 positional argument but 3 were given

Print sorted list:
	>>> l.print_sorted()
	[3, 4, 8, 9]

Delete items from list:
	>>> del l[0]
	>>> del l[1]
	>>> print (l)
	[9, 4]

Append negative numbers:
	>>> l.append(-3)
	>>> l.append(-8)
	>>> l.append(-5)
	>>> print(l)
	[9, 4, -3, -8, -5]

Print sorted list with negative numbers:
	>>> l.print_sorted()
	[-8, -5, -3, 4, 9]

Slice list:
	>>> l = l[2:4]
	>>> print(l)
	[-3, -8]

Clear list:
        >>> l.clear()
        >>> print(l)
        []
